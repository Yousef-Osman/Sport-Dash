@model SportDash.ViewModels.DataViewModel

<div class="modal fade" tabindex="-1" role="dialog" id="Price_Modal" aria-modal="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 id="Price_Modal_header_Message" class="modal-title">Confirmation Message</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <p id="Price_Modal_Body"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>
<div id="Prices_Section" class="container div-min-height mb-5">
    <h1 class="text-elephant pb-3">Prices</h1>

    @{
        string GetTime(TimeSpan time)
        {
            string meridiem;
            int Hour;
            if (time.Hours >= 12)
            {
                meridiem = "PM";
                if (time.Hours == 12)
                {
                    Hour = time.Hours;
                }
                else
                {
                    Hour = time.Hours - 12;
                }
            }
            else
            {
                meridiem = "AM";
                if (time.Hours == 0)
                {
                    Hour = 12;
                }
                else
                {
                    Hour = time.Hours;
                }
            }
            return $"{Hour:00}:{time.Minutes:00} {meridiem}";
        }
    }

    @{int i = 0;}
    @foreach (var item in Model.PlaygroundPrices)
    {
        <div class="row separator">
            <div id="row_@i" class="row col-12 col-lg-6 mx-0 px-0">
                <div class="col-1 "></div>
                <div id="@(item.PlaygroundId)" class="col-10 rounded row prices py-3 d-flex ">
                    <div class="col-2 h-75 align-self-center">
                        <p>From</p>
                    </div>
                    <div class="col-3 h-75 Time rounded align-self-center d-flex justify-content-center">
                        <p class="text-center" id="from_@i">@GetTime(item.Start)</p>
                    </div>
                    <div class="col-1 h-75 px-0 align-self-center">
                        <p class="text-center">To</p>
                    </div>
                    <div class="col-3 h-75 Time rounded align-self-center d-flex justify-content-center">
                        <p class="text-center" id="to_@i">@GetTime(item.End)</p>
                    </div>
                    <div class="col-3 h-75 align-self-center d-flex justify-content-center">
                        <p id="price_@i">@item.Price L.E</p>
                    </div>
                </div>
                <div class="col-1 "></div>
            </div>
            @* Make buutons disapear if not admin *@
            @if (Model.IsAdmin)
            {
                <div class="d-flex">
                    <button id="Update_@i" class="align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Update</button>
                    <button id="Delete_@i" class="align-self-center btn btn-info text-Geyser  mr-2 bg-elephant">Delete</button>
                    <button id="Save_@i" class="d-none align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Save</button>
                    <button id="Cancel_@i" class="d-none align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Cancel</button>
                </div>
            }
            @{i++;}
        </div>
    }

    @if (Model.IsAdmin)
    {
        <button id="Add" class="btn btn-info col-lg-2 py-3 bg-Mountain text-elephant ml-3 m-4">Add</button>
    }
    @* Increment id after adding *@
</div>
@if (Model.IsAdmin)
{
    <script>


        let last_id = @i;
        let allow = true;
        let from_id;
        let to_id;
        let price_id;
        let currId;
        let temp_from_value;
        let temp_to_value;
        let temp_price_value;
        let sourcearray = JSON.parse('@Html.Raw(Json.Serialize(Model.PlaygroundPrices.ToArray()))');

        $(document).ready(() => {



            function addListeners() {
                let updateButtons = $('button[id^="Update_"]');
                let deleteButtons = $('button[id^="Delete_"]');
                let saveButtons = $('button[id^="Save_"]');
                let cancelButtons = $('button[id^="Cancel_"]');
                for (let item of updateButtons) {
                    item.addEventListener("click", updateCallback);
                }
                for (let item of cancelButtons) {
                    item.addEventListener("click", cancelCallback);
                }
                for (let item of deleteButtons) {
                    item.addEventListener("click", deleteCallback);
                }
                for (let item of saveButtons) {
                    item.addEventListener("click", saveCallback);
                }
                document.getElementById("Add").addEventListener("click", () => {
                    //debugger;
                    if (allow === true) {
                        let NewRow = `<div class="row separator" >
                <div id="row_${last_id}" class="row col-12 col-lg-9 mx-0 px-0">
                    <div class="col-1 ">
                    </div>
                    <div class="col-10 prices rounded row prices py-3 d-flex">
                        <div class="col-2 h-75 align-self-center">
                            <p>From</p>
                        </div>
                        <div class="col-3 h-75 Time rounded align-self-center d-flex justify-content-center">
                            <input type='time' id="from_${last_id}">
                        </div>
                        <div class="col-1 h-75 px-0 align-self-center">
                            <p class="text-center">To</p>
                        </div>
                        <div class="col-3 h-75 Time rounded align-self-center d-flex justify-content-center">
                            <input type='time' id="to_${last_id}">
                        </div>
                        <div class="col-3 h-75 align-self-center d-flex justify-content-center">
                            <input type='number' min='1' max='9999' size="4" id="price_${last_id}">
                        </div>
                    </div>
                    <div class="col-1 ">
                    </div>
            </div>
            <div class="d-flex">

                    <button id="Update_${last_id}" class="d-none align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Update</button>
                    <button id="Delete_${last_id}" class="d-none align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Delete</button>
                    <button id="Save_${last_id}" class="align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Save</button>
                    <button id="Cancel_${last_id}" class="align-self-center btn btn-info text-Geyser mr-2 bg-elephant">Cancel</button>

            </div>
            </div>`;
                        currId = last_id;
                        document.getElementById("Prices_Section").innerHTML += NewRow;
                        document.getElementById(`Update_${currId}`).addEventListener("click", updateCallback);
                        document.getElementById(`Delete_${currId}`).addEventListener("click", deleteCallback);
                        document.getElementById(`Save_${currId}`).addEventListener("click", addCallback);
                        document.getElementById(`Cancel_${currId}`).addEventListener("click", cancelCallback);
                        allow = false;
                    }
                    else {
                        raiseModal("Notification", "Finish Other Operations First");
                    }
                });
            }
            addListeners();
            function deleteCallback() {
                //debugger;
                if (allow === true) {
                    currId = getIds(this);
                    Manager.DeletePrice();
                }
                else {
                    raiseModal("Notification", "Finish Other Operations First");
                }

            }
            function cancelCallback() {
                currId = getIds(this);
                if (currId == last_id) {
                    removeRow(last_id);
                    addListeners();
                    allow = true;
                }
                else {

                    revertEditUI(currId, temp_from_value, temp_to_value, temp_price_value);
                }

            }
            function removeRow(Target_id) {
                let rowParent = document.getElementById(`row_${Target_id}`).parentElement;
                rowParent.parentElement.removeChild(rowParent);
            }


            function updateCallback() {
                if (allow === true) {
                    currId = getIds(this);
                    temp_from_value = document.getElementById(`${from_id}`).innerText;
                    temp_to_value = document.getElementById(`${to_id}`).innerText;
                    temp_price_value = document.getElementById(`${price_id}`).innerText.slice(0, -4);
                    toEditUI(currId, document.getElementById(`${from_id}`).innerText, document.getElementById(`${to_id}`).innerText, document.getElementById(`${price_id}`).innerText.slice(0, -4));
                    allow = false;
                }
                else {
                    raiseModal("Notification", "Finish Other Operations First");
                }
            }




            function saveCallback() {
                Manager.PutPrice();
            }

            function addCallback() {
                if (isNumber(document.getElementById("price_" + currId).value)) {
                    Manager.PostPrice();
                }
            }

            function getIds(item) {
                id = getElementIdFrom(item.id, 7);
                from_id = "from_" + id;
                to_id = "to_" + id;
                price_id = "price_" + id;
                return id;
            };

            function getElementIdFrom(str, n) {
                return str.substring(n);
            };

            function toEditUI(target_id, from_value = "", to_value = "", price_value = "") {
            //debugger;
                document.getElementById(`${from_id}`).parentElement.innerHTML = `<input type='time' id = "${from_id}" value="${getTime24(from_value)}">`;
                document.getElementById(`${to_id}`).parentElement.innerHTML = `<input type='time' id = "${to_id}" value="${getTime24(to_value)}">`;
            document.getElementById(`${price_id}`).parentElement.innerHTML = `<input type='number' min='1' max='9999' size="4" id = "${price_id}" value="${price_value}">`;//size doesn't work for chrome

            document.getElementById(`row_${target_id}`).classList.remove("col-lg-6");
            document.getElementById(`row_${target_id}`).classList.add("col-lg-9");

            document.getElementById(`Update_${target_id}`).classList.add("d-none");
            document.getElementById(`Delete_${target_id}`).classList.add("d-none");
            document.getElementById(`Save_${target_id}`).classList.remove("d-none");
            document.getElementById(`Cancel_${target_id}`).classList.remove("d-none");
            allow = false;
        }

            function revertEditUI(target_id, from_value = "", to_value = "", price_value = "") {
                document.getElementById(`from_${target_id}`).parentElement.innerHTML = `<p id="from_${target_id}">${getTimeMeridiem(from_value)}</p>`;
                document.getElementById(`to_${target_id}`).parentElement.innerHTML = `<p id="to_${target_id}">${getTimeMeridiem(to_value)}</p>`;
                document.getElementById(`price_${target_id}`).parentElement.innerHTML = `<p id="price_${target_id}">${price_value} L.E</p>`;

                document.getElementById(`row_${target_id}`).classList.remove("col-lg-9");
                document.getElementById(`row_${target_id}`).classList.add("col-lg-6");

                document.getElementById(`Update_${target_id}`).classList.remove("d-none");
                document.getElementById(`Delete_${target_id}`).classList.remove("d-none");
                document.getElementById(`Save_${target_id}`).classList.add("d-none");
                document.getElementById(`Cancel_${target_id}`).classList.add("d-none");
                allow = true;
            }
            function raiseModal(modalHeader, modalBody) {
                $("#Price_Modal_header_Message").text(modalHeader);
                $("#Price_Modal_Body").text(modalBody);
                $("#Price_Modal").modal();
            }
            var Manager = {

            PutPrice: function () {
                let obj = "";
                let serviceURL = "/Playground/PutPlaygroundPrice/" /*+ sourcearray[currId].playgroundId*/;
                let Data = {
                    "Id": `${sourcearray[currId].id}`,
                    "NewPlaygroundPrice": {
                        "Id": `${sourcearray[currId].id}`,
                        "playgroundId": `${sourcearray[currId].playgroundId}`,
                        "Start": `${document.getElementById(from_id).value}`,
                        "End": `${document.getElementById(to_id).value}`,
                        "Price": `${document.getElementById(price_id).value}`
                    }
                };
                Manager.PostAPI(serviceURL, onSuccess, onFailed, Data);
                    function onSuccess(jsonData) {
                        raiseModal("Updated Successfullly","The price has been successfully updated");
                        obj = jsonData;
                        revertEditUI(currId, document.getElementById(`${from_id}`).value, document.getElementById(`${to_id}`).value, document.getElementById(`${price_id}`).value);
                }
                function onFailed(error) {
                    raiseModal("Update Failed", "The price can't be updated");
                    console.log(error);
                }
                return obj;
            },

            PostPrice: function () {
                let obj = "";
                let serviceURL = "/Playground/AddPlaygroundPrice/";
                let Data = {
                    "NewPlaygroundPrice": {
                        "playgroundId": `@Model.Entity.Id`,
                        "Start": `${document.getElementById("from_"+currId).value}`,
                        "End": `${document.getElementById("to_"+currId).value}`,
                        "Price": `${document.getElementById("price_"+currId).value}`
                    }
                };
                //debugger;
                Manager.PostAPI(serviceURL, addsuccess, onFailed, Data);

                function addsuccess(jsonData) {
                    obj = jsonData;
                    raiseModal("Successful Addition","the price has been added successfully");
                    let from_value = document.getElementById(`from_${last_id}`).value;
                    let to_value = document.getElementById(`to_${last_id}`).value;
                    let price_value = document.getElementById(`price_${last_id}`).value;
                    revertEditUI(last_id, from_value, to_value, price_value);
                    sourcearray.push({ id: jsonData.id, playgroundId: `@Model.Entity.Id`, start: from_value, end: to_value, price: price_value });
                    let rowParent = document.getElementById(`row_${last_id}`).parentElement;

                    //rowParent is row with separator class
                    //rowParent.parentElemen is container
                    rowParent = rowParent.parentElement.insertBefore(rowParent, document.getElementById("Add"));
                    last_id++;
                    addListeners();
                    allow = true;
                }


                function onFailed(error) {
                    raiseModal("Addition Failed","the price can't be added");
                    removeRow(last_id);
                    addListeners();
                    console.log(error);
                }

                return obj;
            },
            DeletePrice: function () {
                let obj = "";
                let serviceURL = "/Playground/DeletePlaygroundPrice/";
                let Data = {
                    "Id": `${sourcearray[currId].id}`
                };

                Manager.PostAPI(serviceURL, onSuccess, onFailed, Data);

                function onSuccess(jsonData) {
                    raiseModal("Successful Deletion","the price has been deleted successfully");
                    removeRow(currId);
                    allow = true;
                }
                function onFailed(error) {
                    raiseModal("Deletion Failed","the price has been updated successfully");
                    console.log(error);
                }

                return obj;
            },
            PostAPI: function (serviceURL, successCallback, errorCallback, requestData) {
                $.ajax({
                    method: "POST",
                    url: serviceURL,
                    //dataType: 'json',
                    success: successCallback,
                    data: requestData,
                    error: errorCallback
                });
            }

            };
            function getTimeMeridiem(myTime="") {
                let time = myTime;
                let hours = time.slice(0, 2);
                hours = parseInt(hours);
                let minutes = time.slice(3, 5);
                minutes = parseInt(minutes);
                if (hours >= 12) {
                    meridiem = " PM";
                    if (hours != 12) {
                        hours -= 12;
                    }
                }
                else {
                    meridiem = " AM";
                    if (hours == 0) {
                        hours = 12;
                    }
                }
                time = padZero(hours) + ":" + padZero(minutes) + meridiem;
                return time;
            }

            let padZero = num => ('0' + num).slice(-2);

            function getTime24(mytime="") {
                let time = mytime;
                let hours = time.slice(0, 2);
                hours = parseInt(hours);
                let minutes = time.slice(3, 5);
                minutes = parseInt(minutes);
                let meridiem = time.slice(6, 8);
                if ((meridiem.toLowerCase() === "pm") && (hours < 12)) {
                    hours += 12;
                }
                else if ((meridiem.toLowerCase() === "am") && (hours === 12)) {
                    hours = 0;
                }
                return padZero(hours) + ":" + padZero(minutes);

            }

            function isNumber(str) {
                var regex = /^[0-9]+$/;
                if (!str.match(regex)) {
                    raiseModal("Unvalid Number","you must add a valid number");
                    return false;
                }
                return true;
            }

        });
    </script>
}